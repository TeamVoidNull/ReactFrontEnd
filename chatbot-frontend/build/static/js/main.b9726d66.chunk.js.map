{"version":3,"sources":["images/rose_name.png","components/LoginContainer.tsx","components/ChatContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LoginContainer","className","id","src","roseLogo","alt","onClick","window","open","client","DirectLine","secret","bot","user","ChatContainer","useState","message","sender","title","linky","addon","messages","setMessages","inputMessage","setInputMessage","onResponse","React","activity","from","bracky","text","matches","match","result","i","length","push","substring","getBracket","shortened","getLink","indexOf","includes","console","log","activity$","subscribe","map","index","cx","href","onSubmit","e","preventDefault","postActivity","name","type","error","enterPressed","value","placeholder","onChange","target","socket","socketIOClient","App","socketsInitialized","setSocketsInitialized","useEffect","on","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9726d66.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rose_name.692504eb.png\";","import roseLogo from \"../images/rose_name.png\"\r\n\r\n\r\n//Left side of the website.  That is all. \r\nexport default function LoginContainer() {\r\n\r\n    const openWebsite = () =>\r\n        window.open(\"https://www.rose-hulman.edu/\");\r\n\r\n    return (\r\n        <div className=\"login-container\">\r\n            <img id=\"roseLogo\" src={roseLogo} alt=\"\"/>\r\n            <div className=\"webLink\" onClick= {openWebsite}>\r\n                <i className=\"bi bi-compass\"></i>\r\n                <a>rose-hulman.edu</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n ","// import roseLogo from \"../images/rose_name.png\"\r\nimport { useEffect, useState } from \"react\";\r\nimport * as React from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nimport { DirectLine } from \"botframework-directlinejs\";\r\n// import { resourceLimits } from \"worker_threads\";\r\n// import { act } from \"react-dom/test-utils\";\r\n// import { Socket } from \"socket.io\";\r\n\r\n//Direct Line way to connect to the chatbot\r\nconst client = new DirectLine({\r\n    secret: \"8UnS-Ty383E.t3MkpbLf4CSdFUedsQmx0N0J_dkfknRJl-mHgvTPMiM\",\r\n  });\r\n  const bot = {\r\n    id: \"roseqnamakertemp-bot\",\r\n    name: \"Rosie\",\r\n    avatarUrl: \"https://bloximages.chicago2.vip.townnews.com/tribstar.com/content/tncms/assets/v3/editorial/2/e4/2e4859c4-a92b-11e5-9d44-f30c2899702c/567a1f0b1c3de.image.jpg\",\r\n  };\r\n  const user = {\r\n    id: \"User\",\r\n    name: \"You\",\r\n  };\r\n\r\n\r\n//Right side of the website.  All the commented out code was for using socket, which we are not using.\r\nexport default function ChatContainer() {\r\n    // const { socket } = props\r\n\r\n    //Message List -> Has message (text), sender (0 for user and 1 for bot), link (either empty or link), title (title of link), addon (0 for no addon, 1 for link, 2 for image) \r\n    const beginningMessage = \"Hello, This is Rosie.  What questions do you have?\"\r\n    const [messages, setMessages] = useState<any>([{ message: beginningMessage, sender: 1, title: \"\", linky: \"\", addon: 0 }])\r\n    const [inputMessage, setInputMessage] = useState<string>(\"\")\r\n\r\n    // useEffect(() => {\r\n    //     socket.on(\"bot message\", (res: any) => {\r\n    //         console.log(\"object\");\r\n    //         setMessages([...messages, { message: res.message, sender: 1 }])\r\n    //     })\r\n    // },[])\r\n\r\n    //helper function to get title (regex)\r\n    const getBracket = (text: String) => {\r\n        const matches = text.match(/\\[(.*?)\\]/g);\r\n          const result = [];\r\n        if (matches) {\r\n            for (let i = 0; i < matches.length; ++i) {\r\n                const match = matches[i];\r\n                result.push(match.substring(1, match.length - 1)); \r\n            }\r\n        }\r\n        if(result.length > 0){\r\n            return result[0];\r\n        } else {\r\n            return \"\"\r\n        }\r\n    };\r\n\r\n    //helper function to get link (regex)\r\n    const getLink = (text: String) => {\r\n        const matches = text.match(/\\(([^)]+)\\)/);\r\n          const result = [];\r\n        if (matches) {\r\n            for (let i = 0; i < matches.length; ++i) {\r\n                const match = matches[i];\r\n                result.push(match.substring(1, match.length - 1));  \r\n            }\r\n        }\r\n        if(result.length > 0){\r\n            return result[0];\r\n        } else {\r\n            return \"\"\r\n        }\r\n    };\r\n\r\n    //called when bot sends a response back.\r\n    const onResponse = React.useCallback(\r\n        (activity) => {\r\n            if (activity.from.id === bot.id) {\r\n                const bracky = getBracket(activity.text)\r\n                var linky = \"\"\r\n                var addon = 0\r\n                var shortened = activity.text\r\n                //check if has addon\r\n                if (bracky.length > 0){\r\n                    linky = getLink(activity.text)\r\n                    addon = 1\r\n                    shortened = shortened.substring(0, shortened.indexOf(\"[\"))\r\n                    //check if image\r\n                    if (activity.text.includes(\"![\")) {\r\n                        addon = 2;\r\n                        shortened = shortened.substring(0, shortened.length-1)\r\n                        console.log(linky);\r\n                    }\r\n                }\r\n\r\n                setMessages([...messages, { message: shortened, sender: 1, title: bracky, linky: linky, addon: addon}]);\r\n\r\n                console.log(\"something happened\");\r\n            }\r\n        }, [messages]\r\n    );\r\n\r\n    React.useEffect(() => {\r\n        client.activity$.subscribe((activity) => onResponse(activity));\r\n    }, [onResponse]);\r\n\r\n    const sendPressed = () => {\r\n        if(inputMessage !== \"\"){\r\n            client\r\n            .postActivity({\r\n              from: {\r\n                id: user.id,\r\n                name: user.name,\r\n              },\r\n              type: \"message\",\r\n              text: inputMessage,\r\n            })\r\n            .subscribe(\r\n              (id) => console.log(\"Posted activity, assigned ID \", id),\r\n              (error) => console.log(\"Error posting activity\", error)\r\n            );\r\n            setMessages([...messages, { message: inputMessage, sender: 0, title: \"\", linky: \"\", addon: 0 }])\r\n            setInputMessage(\"\");\r\n        }\r\n        // socket.emit(\"client message\", inputMessage);\r\n    }\r\n\r\n    const enterPressed = (e: any) => {\r\n        e.preventDefault()\r\n        if(inputMessage !== \"\"){\r\n            client\r\n            .postActivity({\r\n              from: {\r\n                id: user.id,\r\n                name: user.name,\r\n              },\r\n              type: \"message\",\r\n              text: inputMessage,\r\n            })\r\n            .subscribe(\r\n              (id) => console.log(\"Posted activity, assigned ID \", id),\r\n              (error) => console.log(\"Error posting activity\", error)\r\n            );\r\n            setMessages([...messages, { message: inputMessage, sender: 0, title: \"\", linky: \"\", addon: 0  }])\r\n            setInputMessage(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"header-container\">\r\n                <a>Rose Chatbot</a>\r\n            </div>\r\n            <div className=\"chatbox\">\r\n                {\r\n                    messages.map((message:any, index:number) => \r\n                        {\r\n                            //check addon type and posts bot message\r\n                            if (message.addon === 0) {\r\n                                return (\r\n                                    <div className={cx({\"message\": true, \"bot\": message.sender === 1})} \r\n                                        key={`message-${index}`}>\r\n                                        {\r\n                                            message.message\r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            } else if (message.addon === 1) {\r\n                                return (\r\n                                    <div className={cx({\"message\": true, \"bot\": message.sender === 1})} \r\n                                        key={`message-${index}`}>\r\n                                            <a>\r\n                                                {message.message} \r\n                                            </a>\r\n                                            <br></br>\r\n                                            <a href={message.linky}>\r\n                                                {message.title}\r\n                                            </a>\r\n                                        \r\n                                    </div>\r\n                                )\r\n                            } else if (message.addon === 2) {\r\n                                return (\r\n                                    <div className={cx({\"message\": true, \"bot\": message.sender === 1})} \r\n                                        key={`message-${index}`}>\r\n                                            <a>\r\n                                                {message.message} \r\n                                            </a>\r\n                                            <br></br>\r\n                                            <br></br>\r\n                                            <img src={message.linky}/>\r\n                                        \r\n                                    </div>\r\n                                )\r\n                            }\r\n                            \r\n                        }\r\n\r\n                    )\r\n                }\r\n            </div>\r\n            <form onSubmit={e => enterPressed(e)}>\r\n                <input type=\"text\" id=\"message\" value={inputMessage} placeholder=\"Type your message here\" onChange={e => setInputMessage(e.target.value)} ></input>\r\n                <i className=\"bi bi-send\" onClick={sendPressed}></i>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport LoginContainer from './components/LoginContainer';\nimport ChatContainer from './components/ChatContainer';\n\nimport socketIOClient from \"socket.io-client\";\nimport TempContainer from './components/TemporaryContainer';\n\nconst ENDPOINT = \"http://localhost:8001/\";\nconst socket = socketIOClient(ENDPOINT);\n\nfunction App() {\n  \n  const [socketsInitialized, setSocketsInitialized] = useState(false)\n\n  useEffect(() => {\n    if (socket && !socketsInitialized) {\n      setSocketsInitialized(true)\n\n      socket.on(\"connected\", () => {\n        console.log(\"Connected to backend.\");\n      })\n    }}, [])\n\n  return (\n    <div className= \"App\">\n      <LoginContainer/>\n      <ChatContainer/>\n      {/* <ChatContainer socket={socket }/> */}\n    </div>\n  );\n}\n\nexport default App;\n ","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@progress/kendo-react-conversational-ui'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}