{"version":3,"sources":["images/rose_name.png","components/LoginContainer.tsx","components/ChatContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LoginContainer","className","id","src","roseLogo","alt","onClick","window","open","ChatContainer","useState","message","sender","title","linky","addon","messages","setMessages","inputMessage","setInputMessage","updateMessages","bracky","text","matches","match","result","i","length","push","substring","getBracket","shortened","getLink","indexOf","includes","console","log","map","index","cx","href","onSubmit","e","preventDefault","newMessages","fetch","method","headers","body","JSON","stringify","question","then","res","json","data","answers","answer","enterPressed","type","value","placeholder","onChange","target","App","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a47ec5ef.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rose_name.692504eb.png\";","import roseLogo from \"../images/rose_name.png\"\r\n\r\n\r\n//Left side of the website.  That is all. \r\nexport default function LoginContainer() {\r\n\r\n    const openWebsite = () =>\r\n        window.open(\"https://www.rose-hulman.edu/\");\r\n\r\n    return (\r\n        <div className=\"login-container\">\r\n            <img id=\"roseLogo\" src={roseLogo} alt=\"\"/>\r\n            <div className=\"webLink\" onClick= {openWebsite}>\r\n                <i className=\"bi bi-compass\"></i>\r\n                <a>rose-hulman.edu</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n ","// import roseLogo from \"../images/rose_name.png\"\r\nimport { useEffect, useState } from \"react\";\r\nimport * as React from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nimport { DirectLine } from \"botframework-directlinejs\";\r\n// import { resourceLimits } from \"worker_threads\";\r\n// import { act } from \"react-dom/test-utils\";\r\n// import { Socket } from \"socket.io\";\r\n\r\n//Direct Line way to connect to the chatbot\r\n// const client = new DirectLine({\r\n//     secret: \"Pl0xVroBOWU.yElRz4iWd95g_saIACt5sGy3xp6uxzCMSQCNXGGyBg0\",\r\n//   });\r\nconst bot = {\r\n    id: \"roseqnamakertemp-bot\",\r\n    name: \"Rosie\",\r\n    avatarUrl: \"https://bloximages.chicago2.vip.townnews.com/tribstar.com/content/tncms/assets/v3/editorial/2/e4/2e4859c4-a92b-11e5-9d44-f30c2899702c/567a1f0b1c3de.image.jpg\",\r\n};\r\nconst user = {\r\n    id: \"User\",\r\n    name: \"You\",\r\n};\r\n\r\n\r\n//Right side of the website.  All the commented out code was for using socket, which we are not using.\r\nexport default function ChatContainer() {\r\n    // const { socket } = props\r\n\r\n    //Message List -> Has message (text), sender (0 for user and 1 for bot), link (either empty or link), title (title of link), addon (0 for no addon, 1 for link, 2 for image) \r\n    const beginningMessage = \"Hello, This is Rosie.  What questions do you have?\"\r\n    const [messages, setMessages] = useState<any>([{ message: beginningMessage, sender: 1, title: \"\", linky: \"\", addon: 0 }])\r\n    const [inputMessage, setInputMessage] = useState<string>(\"\")\r\n\r\n    // useEffect(() => {\r\n    //     socket.on(\"bot message\", (res: any) => {\r\n    //         console.log(\"object\");\r\n    //         setMessages([...messages, { message: res.message, sender: 1 }])\r\n    //     })\r\n    // },[])\r\n\r\n    //helper function to get title (regex)\r\n    const getBracket = (text: String) => {\r\n        const matches = text.match(/\\[(.*?)\\]/g);\r\n          const result = [];\r\n        if (matches) {\r\n            for (let i = 0; i < matches.length; ++i) {\r\n                const match = matches[i];\r\n                result.push(match.substring(1, match.length - 1)); \r\n            }\r\n        }\r\n        if(result.length > 0){\r\n            return result[0];\r\n        } else {\r\n            return \"\"\r\n        }\r\n    };\r\n\r\n    //helper function to get link (regex)\r\n    const getLink = (text: String) => {\r\n        const matches = text.match(/\\(([^)]+)\\)/);\r\n          const result = [];\r\n        if (matches) {\r\n            for (let i = 0; i < matches.length; ++i) {\r\n                const match = matches[i];\r\n                result.push(match.substring(1, match.length - 1));  \r\n            }\r\n        }\r\n        if(result.length > 0){\r\n            return result[0];\r\n        } else {\r\n            return \"\"\r\n        }\r\n    };\r\n\r\n    //called when bot sends a response back.\r\n    // const onResponse = React.useCallback(\r\n    //     (activity) => {\r\n    //         if (activity.from.id === bot.id) {\r\n    //             const bracky = getBracket(activity.text)\r\n    //             var linky = \"\"\r\n    //             var addon = 0\r\n    //             var shortened = activity.text\r\n    //             //check if has addon\r\n    //             if (bracky.length > 0){\r\n    //                 linky = getLink(activity.text)\r\n    //                 addon = 1\r\n    //                 shortened = shortened.substring(0, shortened.indexOf(\"[\"))\r\n    //                 //check if image\r\n    //                 if (activity.text.includes(\"![\")) {\r\n    //                     addon = 2;\r\n    //                     shortened = shortened.substring(0, shortened.length-1)\r\n    //                     console.log(linky);\r\n    //                 }\r\n    //             }\r\n\r\n    //             setMessages([...messages, { message: shortened, sender: 1, title: bracky, linky: linky, addon: addon}]);\r\n\r\n    //             console.log(\"something happened\");\r\n    //         }\r\n    //     }, [messages]\r\n    // );\r\n\r\n    // React.useEffect(() => {\r\n    //     client.activity$.subscribe((activity) => onResponse(activity));\r\n    // }, [onResponse]);\r\n//[{ message: beginningMessage, sender: 1, title: \"\", linky: \"\", addon: 0 }]\r\n    const updateMessages = (message: string, messages: {message: string, sender: number, title: string, linky: string, addon: number}[]) => {\r\n        const bracky = getBracket(message)\r\n        var linky = \"\"\r\n        var addon = 0\r\n        var shortened = message\r\n        //check if has addon\r\n        if (bracky.length > 0){\r\n            linky = getLink(message)\r\n            addon = 1\r\n            shortened = shortened.substring(0, shortened.indexOf(\"[\"))\r\n            //check if image\r\n            if (message.includes(\"![\")) {\r\n                addon = 2;\r\n                shortened = shortened.substring(0, shortened.length-1)\r\n                console.log(linky);\r\n            }\r\n        }\r\n\r\n        setMessages([...messages, { message: shortened, sender: 1, title: bracky, linky: linky, addon: addon}]);\r\n\r\n    }\r\n\r\n    const sendPressed = () => {\r\n        if(inputMessage !== \"\"){\r\n            // client\r\n            // .postActivity({\r\n            //   from: {\r\n            //     id: user.id,\r\n            //     name: user.name,\r\n            //   },\r\n            //   type: \"message\",\r\n            //   text: inputMessage,\r\n            // })\r\n            // .subscribe(\r\n            //   (id) => console.log(\"Posted activity, assigned ID \", id),\r\n            //   (error) => console.log(\"Error posting activity\", error)\r\n            // );\r\n            let newMessages = [...messages, { message: inputMessage, sender: 0, title: \"\", linky: \"\", addon: 0 }];\r\n            setMessages(newMessages)\r\n            setInputMessage(\"\");\r\n            fetch(\"https://chattest2-b663.azurewebsites.net/qnamaker/knowledgebases/6478d078-6145-414f-bfa1-816bacc6c8bf/generateAnswer\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Host': 'https://chattest2-b663.azurewebsites.net/qnamaker',\r\n                    'Authorization' : 'EndpointKey 590342a0-c347-418f-9bc4-1a35c8ceec84'\r\n                }, \r\n                body: JSON.stringify({question: inputMessage})\r\n              }).then(res => {\r\n                console.log(\"Request complete! Parsing body\");\r\n                return res.json();\r\n              }).then( data => {\r\n                updateMessages(data.answers[0].answer, newMessages);\r\n              });\r\n        }\r\n        // socket.emit(\"client message\", inputMessage);\r\n    }\r\n\r\n    const enterPressed = (e: any) => {\r\n        e.preventDefault()\r\n        if(inputMessage !== \"\"){\r\n            // client\r\n            // .postActivity({\r\n            //   from: {\r\n            //     id: user.id,\r\n            //     name: user.name,\r\n            //   },\r\n            //   type: \"message\",\r\n            //   text: inputMessage,\r\n            // })\r\n            // .subscribe(\r\n            //   (id) => console.log(\"Posted activity, assigned ID \", id),\r\n            //   (error) => console.log(\"Error posting activity\", error)\r\n            // );\r\n            let newMessages = [...messages, { message: inputMessage, sender: 0, title: \"\", linky: \"\", addon: 0 }];\r\n            setMessages(newMessages)\r\n            setInputMessage(\"\");\r\n            fetch(\"https://chattest2-b663.azurewebsites.net/qnamaker/knowledgebases/6478d078-6145-414f-bfa1-816bacc6c8bf/generateAnswer\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Host': 'https://chattest2-b663.azurewebsites.net/qnamaker',\r\n                    'Authorization' : 'EndpointKey 590342a0-c347-418f-9bc4-1a35c8ceec84'\r\n                }, \r\n                body: JSON.stringify({question: inputMessage})\r\n              }).then(res => {\r\n                console.log(\"Request complete! Parsing body\");\r\n                return res.json();\r\n              }).then( data => {\r\n                updateMessages(data.answers[0].answer, newMessages);\r\n              });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"header-container\">\r\n                <a>Rose Chatbot</a>\r\n            </div>\r\n            <div className=\"chatbox\">\r\n                {\r\n                    messages.map((message:any, index:number) => \r\n                        {\r\n                            //check addon type and posts bot message\r\n                            if (message.addon === 0) {\r\n                                return (\r\n                                    <div className={cx({\"message\": true, \"bot\": message.sender === 1})} \r\n                                        key={`message-${index}`}>\r\n                                        {\r\n                                            message.message\r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            } else if (message.addon === 1) {\r\n                                return (\r\n                                    <div className={cx({\"message\": true, \"bot\": message.sender === 1})} \r\n                                        key={`message-${index}`}>\r\n                                            <a>\r\n                                                {message.message} \r\n                                            </a>\r\n                                            <br></br>\r\n                                            <a href={message.linky}>\r\n                                                {message.title}\r\n                                            </a>\r\n                                        \r\n                                    </div>\r\n                                )\r\n                            } else if (message.addon === 2) {\r\n                                return (\r\n                                    <div className={cx({\"message\": true, \"bot\": message.sender === 1})} \r\n                                        key={`message-${index}`}>\r\n                                            <a>\r\n                                                {message.message} \r\n                                            </a>\r\n                                            <br></br>\r\n                                            <br></br>\r\n                                            <img src={message.linky}/>\r\n                                        \r\n                                    </div>\r\n                                )\r\n                            }\r\n                            \r\n                        }\r\n\r\n                    )\r\n                }\r\n            </div>\r\n            <form onSubmit={e => enterPressed(e)}>\r\n                <input type=\"text\" id=\"message\" value={inputMessage} placeholder=\"Type your message here\" onChange={e => setInputMessage(e.target.value)} ></input>\r\n                <i className=\"bi bi-send\" onClick={sendPressed}></i>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport LoginContainer from './components/LoginContainer';\r\nimport ChatContainer from './components/ChatContainer';\r\n\r\nimport socketIOClient from \"socket.io-client\";\r\nimport TempContainer from './components/TemporaryContainer';\r\n\r\nconst ENDPOINT = \"http://localhost:8001/\";\r\n//const socket = socketIOClient(ENDPOINT);\r\n\r\nfunction App() {\r\n  \r\n  const [socketsInitialized, setSocketsInitialized] = useState(false)\r\n\r\n  useEffect(() => {\r\n    // if (socket && !socketsInitialized) {\r\n    //   setSocketsInitialized(true)\r\n\r\n    //   socket.on(\"connected\", () => {\r\n    //     console.log(\"Connected to backend.\");\r\n    //   })\r\n    //}\r\n  }, [])\r\n\r\n  return (\r\n    <div className= \"App\">\r\n      <LoginContainer/>\r\n      <ChatContainer/>\r\n      {/* <ChatContainer socket={socket }/> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n ","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/main.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '@progress/kendo-react-conversational-ui'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}